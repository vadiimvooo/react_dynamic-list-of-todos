{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","setIsClicked","selectedTodo","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","filterType","onFilter","query","onChangeQuery","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClose","userId","useState","isLoadingUsers","setIsLoadingUsers","user","setUser","useEffect","getUser","userFromServer","href","email","name","App","todosFromServer","setTodosFromServer","isLoading","setIsLoading","setFilterType","setSelectedTodo","setQuery","handleOpenModal","useCallback","todoId","newSelectedTodo","find","handleCloseModal","visibleTodos","useMemo","filter","firstCondition","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2a63836.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setIsClicked: (id: number) => void\n  selectedTodo: null | Todo,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setIsClicked,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setIsClicked(todo.id);\n                }}\n              >\n                {selectedTodo?.id === todo.id\n                  ? (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  )\n                  : (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\n\ntype Props = {\n  filterType: string\n  onFilter: React.Dispatch<React.SetStateAction<string>>,\n  query: string,\n  onChangeQuery: React.Dispatch<React.SetStateAction<string>>,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  filterType,\n  onFilter,\n  query,\n  onChangeQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={event => onFilter(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => onChangeQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query\n      && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onChangeQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo,\n  onClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(({ todo, onClose }) => {\n  const {\n    userId,\n    id,\n    title,\n  } = todo;\n\n  const [isLoadingUsers, setIsLoadingUsers] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n        setIsLoadingUsers(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoadingUsers ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [filterType, setFilterType] = useState('all');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => {\n        setTodosFromServer(todos);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleOpenModal = useCallback((todoId: number) => {\n    const newSelectedTodo = todosFromServer.find(todo => todo.id === todoId) || null;\n\n    setSelectedTodo(newSelectedTodo);\n  }, [todosFromServer]);\n\n  const handleCloseModal = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return !query && filterType === 'all'\n      ? todosFromServer\n      : todosFromServer.filter(todo => {\n        const firstCondition = todo.title\n          .toLowerCase()\n          .includes(query.toLowerCase());\n\n        switch (filterType) {\n          case 'all':\n            return firstCondition;\n\n          case 'active':\n            return firstCondition && !todo.completed;\n\n          case 'completed':\n            return firstCondition && todo.completed;\n\n          default:\n            return true;\n        }\n      });\n  }, [todosFromServer, query, filterType]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                onFilter={setFilterType}\n                query={query}\n                onChangeQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    setIsClicked={handleOpenModal}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            todo={selectedTodo}\n            onClose={handleCloseModal}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}